// Unit –∏ Integration —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
const request = require('supertest');
const axios = require('axios');
const MockAdapter = require('axios-mock-adapter');

// –ú–æ–∫–∞–µ–º axios –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
const mockAxios = new MockAdapter(axios);

describe('üß™ Convertio Server Tests', () => {
  let app;

  beforeAll(() => {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É
    process.env.NODE_ENV = 'test';
    process.env.CLOUDCONVERT_KEY = 'test-api-key';
    
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = require('../server-testable.js');
  });

  beforeEach(() => {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    mockAxios.reset();
  });

  afterAll(() => {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    if (app && app.close) {
      app.close();
    }
    mockAxios.restore();
  });

  describe('üè• Health Check Endpoints', () => {
    test('GET /api/health - –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞—Ç—É—Å OK', async () => {
      const response = await request(app)
        .get('/api/health')
        .expect(200);

      expect(response.body).toEqual(
        expect.objectContaining({
          status: 'ok',
          timestamp: expect.any(String),
          uptime: expect.any(Number),
          api_key: 'configured'
        })
      );
    });

    test('GET /health - –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å', async () => {
      const response = await request(app)
        .get('/health')
        .expect(200);

      expect(response.body).toEqual({ status: 'healthy' });
    });
  });

  describe('üìÅ File Conversion Endpoints', () => {
    test('POST /api/start-conversion - –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º', async () => {
      // –ú–æ–∫–∞–µ–º CloudConvert API —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
      mockAxios.onPost('https://api.cloudconvert.com/v2/jobs').reply(200, {
        data: {
          id: 'test-job-123',
          status: 'waiting'
        }
      });

      const response = await request(app)
        .post('/api/start-conversion')
        .attach('file', Buffer.from('test file content'), 'test.txt')
        .field('outputformat', 'pdf')
        .expect(200);

      expect(response.body).toEqual({
        id: 'test-job-123'
      });
    });

    test('POST /api/start-conversion - –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É –±–µ–∑ —Ñ–∞–π–ª–∞', async () => {
      const response = await request(app)
        .post('/api/start-conversion')
        .field('outputformat', 'pdf')
        .expect(400);

      expect(response.body).toEqual({
        error: 'No file'
      });
    });

    test('POST /api/start-conversion - –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ—à–∏–±–∫—É –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∞', async () => {
      const response = await request(app)
        .post('/api/start-conversion')
        .attach('file', Buffer.from('test'), 'test.txt')
        .expect(400);

      expect(response.body).toEqual({
        error: 'No output format'
      });
    });

    test('POST /api/start-conversion - –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ CloudConvert API', async () => {
      // –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É CloudConvert API
      mockAxios.onPost('https://api.cloudconvert.com/v2/jobs').reply(500, {
        error: 'Server error'
      });

      const response = await request(app)
        .post('/api/start-conversion')
        .attach('file', Buffer.from('test'), 'test.txt')
        .field('outputformat', 'pdf')
        .expect(500);

      expect(response.body).toEqual({
        error: 'Conversion failed'
      });
    });
  });

  describe('üìä Conversion Status Endpoints', () => {
    test('GET /api/conversion-status/:id - –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ', async () => {
      mockAxios.onGet('https://api.cloudconvert.com/v2/jobs/test-123').reply(200, {
        data: {
          id: 'test-123',
          status: 'processing',
          tasks: []
        }
      });

      const response = await request(app)
        .get('/api/conversion-status/test-123')
        .expect(200);

      expect(response.body).toEqual({
        id: 'test-123',
        status: 'processing',
        step: 'processing',
        step_percent: 50
      });
    });

    test('GET /api/conversion-status/:id - –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é', async () => {
      mockAxios.onGet('https://api.cloudconvert.com/v2/jobs/test-finished').reply(200, {
        data: {
          id: 'test-finished',
          status: 'finished',
          tasks: [
            {
              operation: 'export/url',
              result: {
                files: [
                  {
                    url: 'https://example.com/converted-file.pdf'
                  }
                ]
              }
            }
          ]
        }
      });

      const response = await request(app)
        .get('/api/conversion-status/test-finished')
        .expect(200);

      expect(response.body).toEqual({
        id: 'test-finished',
        status: 'finished',
        step: 'finish',
        step_percent: 100,
        output: {
          url: 'https://example.com/converted-file.pdf'
        }
      });
    });

    test('GET /api/conversion-status/:id - –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏', async () => {
      mockAxios.onGet('https://api.cloudconvert.com/v2/jobs/test-error').reply(200, {
        data: {
          id: 'test-error',
          status: 'error',
          tasks: []
        }
      });

      const response = await request(app)
        .get('/api/conversion-status/test-error')
        .expect(400);

      expect(response.body).toEqual({
        error: 'Conversion failed'
      });
    });

    test('GET /api/conversion-status/:id - –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ API', async () => {
      mockAxios.onGet('https://api.cloudconvert.com/v2/jobs/test-api-error').reply(500);

      const response = await request(app)
        .get('/api/conversion-status/test-api-error')
        .expect(500);

      expect(response.body).toEqual({
        error: 'Status check failed'
      });
    });
  });

  describe('üåê Static File Serving', () => {
    test('GET / - –¥–æ–ª–∂–µ–Ω –æ—Ç–¥–∞–≤–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É', async () => {
      const response = await request(app)
        .get('/')
        .expect(200);

      expect(response.headers['content-type']).toMatch(/html/);
    });

    test('GET /unknown-route - –¥–æ–ª–∂–µ–Ω –æ—Ç–¥–∞–≤–∞—Ç—å –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (SPA)', async () => {
      const response = await request(app)
        .get('/unknown-route')
        .expect(200);

      expect(response.headers['content-type']).toMatch(/html/);
    });
  });

  describe('üîë API Key Configuration', () => {
    test('–°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º API –∫–ª—é—á–æ–º', () => {
      expect(process.env.CLOUDCONVERT_KEY).toBe('test-api-key');
    });

    test('POST /api/start-conversion - –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏', async () => {
      // –ú–æ–∫–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
      mockAxios.onPost('https://api.cloudconvert.com/v2/jobs').networkError();

      const response = await request(app)
        .post('/api/start-conversion')
        .attach('file', Buffer.from('test'), 'test.txt')
        .field('outputformat', 'pdf')
        .expect(500);

      expect(response.body).toEqual({
        error: 'Conversion failed'
      });
    });
  });
});