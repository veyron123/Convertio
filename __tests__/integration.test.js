// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã —Ü–µ–ª–∏–∫–æ–º
const request = require('supertest');
const axios = require('axios');
const MockAdapter = require('axios-mock-adapter');

const mockAxios = new MockAdapter(axios);

describe('üîó Integration Tests', () => {
  let app;

  beforeAll(() => {
    process.env.NODE_ENV = 'test';
    process.env.CLOUDCONVERT_KEY = 'integration-test-key';
    
    app = require('../server-testable.js');
  });

  beforeEach(() => {
    mockAxios.reset();
  });

  afterAll(() => {
    if (app && app.close) {
      app.close();
    }
    mockAxios.restore();
  });

  describe('üîÑ Complete Conversion Workflow', () => {
    test('–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∑–∞–≥—Ä—É–∑–∫–∞ ‚Üí –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ‚Üí –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞', async () => {
      const jobId = 'integration-test-job-456';
      
      // 1. –ú–æ–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
      mockAxios.onPost('https://api.cloudconvert.com/v2/jobs').reply(200, {
        data: {
          id: jobId,
          status: 'waiting'
        }
      });

      // 2. –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
      const uploadResponse = await request(app)
        .post('/api/start-conversion')
        .attach('file', Buffer.from('test image content'), 'test.png')
        .field('outputformat', 'jpg')
        .expect(200);

      expect(uploadResponse.body.id).toBe(jobId);

      // 3. –ú–æ–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ - –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
      mockAxios.onGet(`https://api.cloudconvert.com/v2/jobs/${jobId}`).reply(200, {
        data: {
          id: jobId,
          status: 'processing',
          tasks: []
        }
      });

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
      const processingResponse = await request(app)
        .get(`/api/conversion-status/${jobId}`)
        .expect(200);

      expect(processingResponse.body).toEqual({
        id: jobId,
        status: 'processing',
        step: 'processing',
        step_percent: 50
      });

      // 5. –ú–æ–∫–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
      mockAxios.onGet(`https://api.cloudconvert.com/v2/jobs/${jobId}`).reply(200, {
        data: {
          id: jobId,
          status: 'finished',
          tasks: [
            {
              operation: 'export/url',
              result: {
                files: [
                  {
                    url: 'https://storage.cloudconvert.com/converted-file.jpg',
                    size: 45678
                  }
                ]
              }
            }
          ]
        }
      });

      // 6. –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const finishedResponse = await request(app)
        .get(`/api/conversion-status/${jobId}`)
        .expect(200);

      expect(finishedResponse.body).toEqual({
        id: jobId,
        status: 'finished',
        step: 'finish',
        step_percent: 100,
        output: {
          url: 'https://storage.cloudconvert.com/converted-file.jpg'
        }
      });
    });
  });

  describe('üö® Error Handling Integration', () => {
    test('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏', async () => {
      // 1. –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ (–Ω–µ—Ç —Ñ–∞–π–ª–∞)
      await request(app)
        .post('/api/start-conversion')
        .field('outputformat', 'jpg')
        .expect(400);

      // 2. –û—à–∏–±–∫–∞ CloudConvert API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
      mockAxios.onPost('https://api.cloudconvert.com/v2/jobs').reply(500);

      await request(app)
        .post('/api/start-conversion')
        .attach('file', Buffer.from('test'), 'test.txt')
        .field('outputformat', 'pdf')
        .expect(500);

      // 3. –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏
      mockAxios.onGet('https://api.cloudconvert.com/v2/jobs/nonexistent').reply(404);

      await request(app)
        .get('/api/conversion-status/nonexistent')
        .expect(500);

      // 4. –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ—Ç CloudConvert
      mockAxios.onGet('https://api.cloudconvert.com/v2/jobs/error-job').reply(200, {
        data: {
          id: 'error-job',
          status: 'error',
          tasks: []
        }
      });

      await request(app)
        .get('/api/conversion-status/error-job')
        .expect(400);
    });
  });

  describe('üîí Security Integration Tests', () => {
    test('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤', async () => {
      // –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      const suspiciousContent = '<script>alert("xss")</script>';
      
      mockAxios.onPost('https://api.cloudconvert.com/v2/jobs').reply(200, {
        data: { id: 'security-test', status: 'waiting' }
      });

      const response = await request(app)
        .post('/api/start-conversion')
        .attach('file', Buffer.from(suspiciousContent), 'suspicious.html')
        .field('outputformat', 'pdf')
        .expect(200);

      // –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
      expect(response.body.id).toBe('security-test');
    });

    test('–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞', async () => {
      // –°–æ–∑–¥–∞–µ–º "–±–æ–ª—å—à–æ–π" —Ñ–∞–π–ª (–∏–º–∏—Ç–∏—Ä—É–µ–º)
      const largeFileBuffer = Buffer.alloc(1024); // 1KB –¥–ª—è —Ç–µ—Å—Ç–∞
      
      mockAxios.onPost('https://api.cloudconvert.com/v2/jobs').reply(200, {
        data: { id: 'large-file-test', status: 'waiting' }
      });

      // –î–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω—è—Ç—å —Ñ–∞–π–ª –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
      await request(app)
        .post('/api/start-conversion')
        .attach('file', largeFileBuffer, 'normal-file.txt')
        .field('outputformat', 'pdf')
        .expect(200);
    });
  });

  describe('‚ö° Performance Integration Tests', () => {
    test('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', async () => {
      const startTime = Date.now();
      const requests = [];
      
      // –ú–æ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      mockAxios.onPost('https://api.cloudconvert.com/v2/jobs').reply(200, {
        data: { id: 'perf-test', status: 'waiting' }
      });

      // –°–æ–∑–¥–∞–µ–º 5 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      for (let i = 0; i < 5; i++) {
        requests.push(
          request(app)
            .post('/api/start-conversion')
            .attach('file', Buffer.from(`test content ${i}`), `file${i}.txt`)
            .field('outputformat', 'pdf')
        );
      }

      const responses = await Promise.all(requests);
      const endTime = Date.now();
      const duration = endTime - startTime;

      // –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º–∏
      responses.forEach(response => {
        expect(response.status).toBe(200);
        expect(response.body.id).toBe('perf-test');
      });

      // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω—ã–º
      expect(duration).toBeLessThan(5000); // –ú–µ–Ω–µ–µ 5 —Å–µ–∫—É–Ω–¥
    });
  });

  describe('üåê API Contract Tests', () => {
    test('API –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É', async () => {
      // Health check –∫–æ–Ω—Ç—Ä–∞–∫—Ç
      const healthResponse = await request(app).get('/api/health');
      
      expect(healthResponse.body).toEqual(
        expect.objectContaining({
          status: expect.stringMatching(/^(ok|healthy)$/),
          timestamp: expect.stringMatching(/^\d{4}-\d{2}-\d{2}T/),
          uptime: expect.any(Number),
          api_key: expect.stringMatching(/^(configured|missing)$/)
        })
      );

      // Conversion start –∫–æ–Ω—Ç—Ä–∞–∫—Ç
      mockAxios.onPost('https://api.cloudconvert.com/v2/jobs').reply(200, {
        data: { id: 'contract-test', status: 'waiting' }
      });

      const conversionResponse = await request(app)
        .post('/api/start-conversion')
        .attach('file', Buffer.from('test'), 'test.txt')
        .field('outputformat', 'pdf');

      expect(conversionResponse.body).toEqual(
        expect.objectContaining({
          id: expect.any(String)
        })
      );

      // Status check –∫–æ–Ω—Ç—Ä–∞–∫—Ç
      mockAxios.onGet('https://api.cloudconvert.com/v2/jobs/contract-test').reply(200, {
        data: {
          id: 'contract-test',
          status: 'finished',
          tasks: [
            {
              operation: 'export/url',
              result: { files: [{ url: 'http://example.com/file.pdf' }] }
            }
          ]
        }
      });

      const statusResponse = await request(app).get('/api/conversion-status/contract-test');
      
      expect(statusResponse.body).toEqual(
        expect.objectContaining({
          id: expect.any(String),
          status: expect.any(String),
          step: expect.any(String),
          step_percent: expect.any(Number)
        })
      );
    });
  });
});