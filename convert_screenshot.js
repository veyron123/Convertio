const axios = require('axios');
const fs = require('fs');
const path = require('path');
const FormData = require('form-data');

async function convertScreenshot() {
  const inputFile = path.join(__dirname, 'video for test', 'Screenshot (19).png');
  const outputDir = path.join(__dirname, 'video for test');
  
  console.log('=== –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø SCREENSHOT (19).PNG -> JPG ===');
  console.log('–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª:', inputFile);
  console.log('–ü–∞–ø–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', outputDir);
  
  if (!fs.existsSync(inputFile)) {
    console.log('–û–®–ò–ë–ö–ê: –§–∞–π–ª Screenshot (19).png –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return;
  }
  
  const fileSize = fs.statSync(inputFile).size;
  console.log(`–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(fileSize / 1024).toFixed(2)} KB`);
  
  try {
    console.log('\n–®–∞–≥ 1: –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Screenshot (19).png...');
    
    const form = new FormData();
    form.append('file', fs.createReadStream(inputFile), 'Screenshot (19).png');
    form.append('outputformat', 'jpg');
    
    const response = await axios.post('http://localhost:3003/api/start-conversion', form, {
      headers: {
        ...form.getHeaders(),
      },
      timeout: 120000 // 2 –º–∏–Ω—É—Ç—ã
    });
    
    if (response.status !== 200) {
      console.log(`–û–®–ò–ë–ö–ê –∑–∞–ø—É—Å–∫–∞: ${response.status}`);
      console.log(`–û—Ç–≤–µ—Ç: ${JSON.stringify(response.data, null, 2)}`);
      return;
    }
    
    const jobId = response.data.id;
    console.log(`–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞! Job ID: ${jobId}`);
    
    console.log('\n–®–∞–≥ 2: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏...');
    
    for (let attempt = 1; attempt <= 30; attempt++) {
      console.log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ ${attempt}/30...`);
      
      try {
        const statusResponse = await axios.get(`http://localhost:3003/api/conversion-status/${jobId}`, {
          timeout: 15000
        });
        
        if (statusResponse.status !== 200) {
          console.log(`  –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: ${statusResponse.status}`);
          await new Promise(resolve => setTimeout(resolve, 5000));
          continue;
        }
        
        const statusData = statusResponse.data;
        const status = statusData.status || 'unknown';
        const step = statusData.step || 'unknown';
        const percent = statusData.step_percent || 0;
        
        console.log(`  –°—Ç–∞—Ç—É—Å: ${status}, –≠—Ç–∞–ø: ${step}, –ü—Ä–æ–≥—Ä–µ—Å—Å: ${percent}%`);
        
        if (status === 'finished' && statusData.output) {
          const downloadUrl = statusData.output.url;
          const fileSize = statusData.output.size || 'unknown';
          
          console.log('\nüéâ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
          console.log('URL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', downloadUrl);
          console.log('–†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', fileSize, '–±–∞–π—Ç');
          
          console.log('\n–®–∞–≥ 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
          const downloadResponse = await axios.get(downloadUrl, {
            responseType: 'arraybuffer',
            timeout: 60000
          });
          
          if (downloadResponse.status === 200) {
            const outputFile = path.join(outputDir, 'Screenshot_19_converted.jpg');
            
            fs.writeFileSync(outputFile, downloadResponse.data);
            
            const resultSize = downloadResponse.data.length;
            console.log(`‚úÖ –ì–û–¢–û–í–û! –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputFile}`);
            console.log(`üìä –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${(resultSize / 1024).toFixed(2)} KB`);
            console.log(`üìà –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: ${((fileSize - resultSize) / fileSize * 100).toFixed(1)}%`);
            
            if (fs.existsSync(outputFile)) {
              console.log('\nüéØ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!');
              console.log('–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ:', outputDir);
            } else {
              console.log('‚ùå –û–®–ò–ë–ö–ê: –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω');
            }
            return;
          } else {
            console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: ${downloadResponse.status}`);
            return;
          }
        } else if (status === 'error') {
          console.log(`‚ùå –û–®–ò–ë–ö–ê –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:`, statusData);
          return;
        } else if (status === 'processing') {
          console.log(`  ‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... (${step})`);
        }
        
        await new Promise(resolve => setTimeout(resolve, 5000));
      } catch (statusError) {
        console.log(`  ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${statusError.message}`);
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }
    
    console.log('‚è∞ –¢–ê–ô–ú–ê–£–¢: –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (2.5 –º–∏–Ω—É—Ç—ã)');
    
  } catch (error) {
    console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    if (error.response) {
      console.log('HTTP Status:', error.response.status);
      console.log('Response Data:', JSON.stringify(error.response.data, null, 2));
    }
    if (error.code === 'ECONNRESET') {
      console.log('–ü–æ–¥—Å–∫–∞–∑–∫–∞: –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–µ—Ä–≤–µ—Ä–∞');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
convertScreenshot();