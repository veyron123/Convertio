const axios = require('axios');
const fs = require('fs');
const path = require('path');
const FormData = require('form-data');

async function testWebConversion() {
  console.log('=== –¢–ï–°–¢ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò –ß–ï–†–ï–ó –í–ï–ë API ===');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
    console.log('1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä...');
    const healthResponse = await axios.get('http://localhost:3002/api/health');
    console.log('   –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', healthResponse.data.status);
    
    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–≥—Ä—É–∑–∫—É
    console.log('\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞...');
    const inputFile = path.join(__dirname, 'video for test', 'Screenshot (19).png');
    
    const testForm = new FormData();
    testForm.append('file', fs.createReadStream(inputFile));
    
    const testResponse = await axios.post('http://localhost:3002/api/test-upload', testForm, {
      headers: {
        ...testForm.getHeaders(),
      },
      timeout: 30000
    });
    
    console.log('   –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏:', testResponse.data.success ? '–£–°–ü–ï–•' : '–ù–ï–£–î–ê–ß–ê');
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é PNG -> JPG...');
    
    const convertForm = new FormData();
    convertForm.append('file', fs.createReadStream(inputFile));
    convertForm.append('outputformat', 'jpg');
    
    const convertResponse = await axios.post('http://localhost:3002/api/start-conversion', convertForm, {
      headers: {
        ...convertForm.getHeaders(),
      },
      timeout: 60000
    });
    
    if (convertResponse.status === 200 && convertResponse.data.id) {
      const jobId = convertResponse.data.id;
      console.log('   –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞! Job ID:', jobId);
      
      // 4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
      console.log('\n4. –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...');
      
      for (let attempt = 1; attempt <= 15; attempt++) {
        console.log(`   –ü—Ä–æ–≤–µ—Ä–∫–∞ ${attempt}/15...`);
        
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        const statusResponse = await axios.get(`http://localhost:3002/api/conversion-status/${jobId}`, {
          timeout: 15000
        });
        
        const statusData = statusResponse.data;
        const status = statusData.status;
        const step = statusData.step || 'unknown';
        
        console.log(`     –°—Ç–∞—Ç—É—Å: ${status}, –≠—Ç–∞–ø: ${step}`);
        
        if (status === 'finished' && statusData.output) {
          const downloadUrl = statusData.output.url;
          console.log('\n‚úÖ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
          console.log('   URL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', downloadUrl);
          
          // 5. –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          console.log('\n5. –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...');
          const downloadResponse = await axios.get(downloadUrl, {
            responseType: 'arraybuffer',
            timeout: 60000
          });
          
          if (downloadResponse.status === 200) {
            const outputFile = path.join(__dirname, 'video for test', 'Screenshot_19_WEB_TEST.jpg');
            
            fs.writeFileSync(outputFile, downloadResponse.data);
            
            const originalSize = fs.statSync(inputFile).size;
            const resultSize = downloadResponse.data.length;
            const compression = ((originalSize - resultSize) / originalSize * 100).toFixed(1);
            
            console.log('\nüéâ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!');
            console.log('üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', outputFile);
            console.log('üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä:', (originalSize / 1024).toFixed(2), 'KB');
            console.log('üìä –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', (resultSize / 1024).toFixed(2), 'KB');
            console.log('üìà –°–∂–∞—Ç–∏–µ:', compression + '%');
            
            return;
          } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', downloadResponse.status);
            return;
          }
        } else if (status === 'error') {
          console.log('‚ùå –û–®–ò–ë–ö–ê –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', statusData);
          return;
        } else if (status === 'processing') {
          console.log(`     ‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞... (${step})`);
        }
      }
      
      console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
      
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', convertResponse.status);
      console.log('   –û—Ç–≤–µ—Ç:', convertResponse.data);
    }
    
  } catch (error) {
    console.log('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm start');
    } else if (error.code === 'ECONNRESET') {
      console.log('üí° –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.');
    } else if (error.response) {
      console.log('HTTP Status:', error.response.status);
      console.log('Response Data:', error.response.data);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testWebConversion();