require('dotenv').config();
const express = require('express');
const axios = require('axios');
const cors = require('cors');
const Busboy = require('busboy');
const os = require('os');
const path = require('path');
const fs = require('fs');

const app = express();
const port = process.env.PORT || 3002;
const cloudConvertKey = process.env.CLOUDCONVERT_KEY;

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
console.log('üîç Environment Check:');
console.log(`Port: ${port}`);
console.log(`CLOUDCONVERT_KEY: ${cloudConvertKey ? 'SET ‚úÖ' : 'MISSING ‚ùå'}`);
console.log(`NODE_ENV: ${process.env.NODE_ENV || 'not set'}`);

if (!cloudConvertKey) {
  console.error('üö® CRITICAL: CLOUDCONVERT_KEY environment variable is not set!');
  console.error('   Please set CLOUDCONVERT_KEY in Render Dashboard Environment Variables');
}

app.use(cors({ origin: true }));
app.use(express.static('public'));

// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ limit: '50mb', extended: true }));

// Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞
app.set('trust proxy', true);

app.post('/api/start-conversion', (req, res) => {
  console.log('üîÑ Received conversion request');
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ CLOUDCONVERT_KEY –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
  if (!cloudConvertKey) {
    console.error('üö® CLOUDCONVERT_KEY missing in request handler');
    return res.status(500).json({ 
      error: 'Server configuration error: CLOUDCONVERT_KEY not set. Please check Render Environment Variables.' 
    });
  }

  if (req.method !== 'POST') {
    return res.status(405).send('Method Not Allowed');
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∏–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≤–∏—Å—è—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
  req.setTimeout(120000); // 2 –º–∏–Ω—É—Ç—ã
  res.setTimeout(120000);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
  req.on('close', () => {
    console.log('‚ö†Ô∏è Client disconnected during upload');
  });

  try {
    const busboy = Busboy({ 
      headers: req.headers,
      limits: {
        fileSize: 400 * 1024 * 1024, // 400MB
        files: 1,
        fieldSize: 10 * 1024 * 1024, // 10MB –¥–ª—è –ø–æ–ª–µ–π
        parts: 10 // –º–∞–∫—Å–∏–º—É–º 10 —á–∞—Å—Ç–µ–π
      },
      defCharset: 'utf8'
    });
    
    const tmpdir = os.tmpdir();
    const fields = {};
    const fileWrites = [];
    
    console.log('üìù Busboy initialized successfully');

  busboy.on('field', (fieldname, val) => {
    fields[fieldname] = val;
  });

  busboy.on('file', (fieldname, file, { filename }) => {
    const filepath = path.join(tmpdir, filename);
    const writeStream = fs.createWriteStream(filepath);
    file.pipe(writeStream);

    const promise = new Promise((resolve, reject) => {
      file.on('end', () => {
        writeStream.end();
      });
      writeStream.on('finish', () => {
        resolve({ filepath, filename });
      });
      writeStream.on('error', reject);
    });
    fileWrites.push(promise);
  });

  const conversionPromise = new Promise((resolve, reject) => {
    busboy.on('finish', async () => {
      try {
        const files = await Promise.all(fileWrites);
        const [uploadedFile] = files;

        if (!uploadedFile) {
          return reject(new Error('File is required'));
        }

        let fileBuffer;
        let shouldUseDirectUpload = false; // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞—Ä–∞–Ω–µ–µ
        
        try {
          const fileStats = fs.statSync(uploadedFile.filepath);
          const fileSizeInMB = fileStats.size / (1024 * 1024);
          
          // –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
          const clientIP = req.ip || req.connection.remoteAddress || req.socket.remoteAddress || 
                          (req.connection.socket ? req.connection.socket.remoteAddress : null) ||
                          req.headers['x-forwarded-for'] || req.headers['x-real-ip'];
          
          // –í–∞—à IP –∞–¥—Ä–µ—Å (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π IP)
          const allowedIP = '127.0.0.1'; // –∏–ª–∏ –≤–∞—à –≤–Ω–µ—à–Ω–∏–π IP
          const isLocalhost = clientIP === '::1' || clientIP === '127.0.0.1' || clientIP === '::ffff:127.0.0.1';
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è Render Free (–º–∞–∫—Å–∏–º—É–º 400MB –æ–±—â–∏–π –ª–∏–º–∏—Ç)
          const maxBase64Size = 200; // 200MB –º–∞–∫—Å–∏–º—É–º –¥–ª—è base64 (—ç–∫–æ–Ω–æ–º–∏–º RAM)
          const maxDirectUploadSize = 400; // 400MB –º–∞–∫—Å–∏–º—É–º –¥–ª—è Render Free Plan
          
          if (fileSizeInMB > maxDirectUploadSize) {
            throw new Error(`File size exceeds ${maxDirectUploadSize}MB limit`);
          }
          
          shouldUseDirectUpload = fileSizeInMB > maxBase64Size;
          
          // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          console.log(`File upload: ${fileSizeInMB.toFixed(2)}MB from IP: ${clientIP}, isLocalhost: ${isLocalhost}, useDirectUpload: ${shouldUseDirectUpload}`);
          
          if (!shouldUseDirectUpload) {
            // –î–ª—è —Ñ–∞–π–ª–æ–≤ –º–µ–Ω—å—à–µ 200MB –∏—Å–ø–æ–ª—å–∑—É–µ–º base64
            fileBuffer = fs.readFileSync(uploadedFile.filepath);
          }
        } catch (fileError) {
          console.error('Error reading file:', fileError);
          throw new Error(`File reading error: ${fileError.message}`);
        }

        let response;
        let jobId;

        // CloudConvert —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Jobs —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏
        console.log(`üîÑ Starting CloudConvert job for ${uploadedFile.filename} ‚Üí ${fields.outputformat}`);
        
        if (shouldUseDirectUpload) {
          // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º upload –∑–∞–¥–∞—á—É
          console.log('Using CloudConvert upload task for large file...');
          
          response = await axios.post('https://api.cloudconvert.com/v2/jobs', {
            tasks: {
              'upload-file': {
                operation: 'import/upload'
              },
              'convert-file': {
                operation: 'convert',
                input: 'upload-file',
                output_format: fields.outputformat
              },
              'export-file': {
                operation: 'export/url',
                input: 'convert-file'
              }
            }
          }, {
            headers: {
              'Authorization': `Bearer ${cloudConvertKey}`,
              'Content-Type': 'application/json'
            }
          });

          if (response.status !== 200) {
            throw new Error('Failed to create CloudConvert job');
          }

          jobId = response.data.data.id;
          const uploadTask = response.data.data.tasks.find(task => task.name === 'upload-file');
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ CloudConvert
          console.log(`üì§ Uploading file to CloudConvert...`);
          const fileStream = fs.createReadStream(uploadedFile.filepath);
          
          const uploadResponse = await axios.post(uploadTask.result.form.url, {
            ...uploadTask.result.form.parameters,
            file: fileStream
          }, {
            headers: {
              'Content-Type': 'multipart/form-data'
            },
            timeout: 1800000 // 30 –º–∏–Ω—É—Ç
          });

          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          if (fs.existsSync(uploadedFile.filepath)) {
            fs.unlinkSync(uploadedFile.filepath);
          }
          
        } else {
          // –î–ª—è —Ñ–∞–π–ª–æ–≤ –º–µ–Ω—å—à–µ 200MB –∏—Å–ø–æ–ª—å–∑—É–µ–º base64
          console.log('Using CloudConvert base64 import for small file...');
          
          response = await axios.post('https://api.cloudconvert.com/v2/jobs', {
            tasks: {
              'import-file': {
                operation: 'import/base64',
                file: fileBuffer.toString('base64'),
                filename: uploadedFile.filename
              },
              'convert-file': {
                operation: 'convert',
                input: 'import-file',
                output_format: fields.outputformat
              },
              'export-file': {
                operation: 'export/url',
                input: 'convert-file'
              }
            }
          }, {
            headers: {
              'Authorization': `Bearer ${cloudConvertKey}`,
              'Content-Type': 'application/json'
            }
          });

          if (response.status !== 200) {
            throw new Error('Failed to create CloudConvert job');
          }

          jobId = response.data.data.id;
        }

        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è job
        if (fs.existsSync(uploadedFile.filepath)) {
          fs.unlinkSync(uploadedFile.filepath);
          console.log(`üóëÔ∏è Temporary file deleted: ${uploadedFile.filepath}`);
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º CloudConvert Job ID
        console.log(`‚úÖ CloudConvert job created successfully: ${jobId}`);
        resolve({ id: jobId });
      } catch (error) {
        console.error('üö® Detailed error in CloudConvert process:', {
          message: error.message,
          stack: error.stack,
          code: error.code,
          cloudConvertKey: cloudConvertKey ? 'SET' : 'MISSING',
          response: error.response ? {
            status: error.response.status,
            statusText: error.response.statusText,
            data: error.response.data
          } : 'No response data'
        });
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if (uploadedFile && fs.existsSync(uploadedFile.filepath)) {
          try {
            fs.unlinkSync(uploadedFile.filepath);
            console.log(`üóëÔ∏è Temporary file deleted after error: ${uploadedFile.filepath}`);
          } catch (deleteError) {
            console.error('Error deleting temporary file:', deleteError);
          }
        }
        
        reject(error);
      }
    });

    busboy.on('error', (err) => {
    console.error('üö® Busboy error:', err);
    reject(err);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  req.on('error', (err) => {
    console.error('üö® Request error:', err);
    reject(new Error('Request connection error'));
  });

  req.on('aborted', () => {
    console.error('üö® Request aborted by client');
    reject(new Error('Request was aborted'));
  });

  req.pipe(busboy);

  conversionPromise
    .then((data) => {
      console.log('‚úÖ Conversion started successfully:', data.id);
      res.json({ id: data.id });
    })
    .catch((error) => {
      console.error('üö® Error during CloudConvert process:', {
        message: error.message,
        stack: error.stack,
        code: error.code,
        cloudConvertKey: cloudConvertKey ? 'SET' : 'MISSING',
        response: error.response ? error.response.data : 'No response'
      });
      
      // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      if (error.message.includes('configuration error')) {
        return res.status(500).json({ error: error.message });
      }
      if (error.message.includes('File size exceeds')) {
        return res.status(413).json({ error: error.message });
      }
      if (error.message.includes('API')) {
        return res.status(422).json({ error: error.message });
      }
      
      res.status(500).json({ error: `Failed to process file upload: ${error.message}` });
    });
  } catch (initError) {
    console.error('üö® Error initializing busboy:', initError);
    if (!res.headersSent) {
      res.status(500).json({ error: 'Failed to initialize file upload handler' });
    }
  }
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('üö® Uncaught Exception:', error);
  // –ù–ï –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üö® Unhandled Rejection at:', promise, 'reason:', reason);
  // –ù–ï –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
});

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
app.post('/api/test-upload', (req, res) => {
  console.log('üß™ Test upload endpoint');
  
  try {
    const busboy = Busboy({ 
      headers: req.headers,
      limits: {
        fileSize: 10 * 1024 * 1024, // 10MB –¥–ª—è —Ç–µ—Å—Ç–∞
        files: 1
      }
    });
    
    let fileReceived = false;
    
    busboy.on('file', (fieldname, file, { filename }) => {
      console.log('üìÅ File received:', filename);
      fileReceived = true;
      
      let fileSize = 0;
      file.on('data', (data) => {
        fileSize += data.length;
      });
      
      file.on('end', () => {
        console.log('‚úÖ File upload complete:', fileSize, 'bytes');
      });
    });
    
    busboy.on('finish', () => {
      console.log('‚úÖ Upload finished');
      res.json({ 
        success: true, 
        message: 'File uploaded successfully',
        fileReceived: fileReceived
      });
    });
    
    req.pipe(busboy);
    
  } catch (error) {
    console.error('üö® Test upload error:', error);
    res.status(500).json({ error: 'Test upload failed' });
  }
});

// Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
app.get('/api/health', (req, res) => {
  const health = {
    status: 'ok',
    timestamp: new Date().toISOString(),
    environment: {
      port: port,
      nodeEnv: process.env.NODE_ENV || 'not set',
      cloudConvertKey: cloudConvertKey ? 'SET ‚úÖ' : 'MISSING ‚ùå'
    }
  };
  
  console.log('üè• Health check requested:', health);
  res.json(health);
});

// –¢–µ—Å—Ç CloudConvert API
app.get('/api/test-cloudconvert', async (req, res) => {
  console.log('üß™ Testing CloudConvert API...');
  
  if (!cloudConvertKey) {
    return res.status(500).json({ error: 'CLOUDCONVERT_KEY not set' });
  }

  try {
    // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º job –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    const jobResponse = await axios.post('https://api.cloudconvert.com/v2/jobs', {
      tasks: {
        'import-file': {
          operation: 'import/base64',
          file: 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==',
          filename: 'test.png'
        },
        'convert-file': {
          operation: 'convert',
          input: 'import-file',
          output_format: 'jpg'
        },
        'export-file': {
          operation: 'export/url',
          input: 'convert-file'
        }
      }
    }, {
      headers: {
        'Authorization': `Bearer ${cloudConvertKey}`,
        'Content-Type': 'application/json'
      }
    });

    console.log('‚úÖ CloudConvert API test response:', jobResponse.data);
    res.json({
      success: true,
      cloudconvert_response: jobResponse.data,
      message: 'CloudConvert API working!'
    });
  } catch (error) {
    console.error('üö® CloudConvert API test failed:', {
      message: error.message,
      response: error.response ? error.response.data : 'No response'
    });
    
    res.status(500).json({
      success: false,
      error: error.message,
      cloudconvert_error: error.response ? error.response.data : null
    });
  }
});

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ç–æ—á–Ω–æ –∫–∞–∫ curl
app.get('/api/test-curl-like', async (req, res) => {
  console.log('üß™ Testing Convertio API exactly like curl...');
  
  if (!convertioKey) {
    return res.status(500).json({ error: 'CONVERTIO_KEY not set' });
  }

  try {
    const response = await fetch('https://api.convertio.co/convert', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': '*/*'
      },
      body: JSON.stringify({
        "apikey": convertioKey,
        "input": "base64", 
        "file": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==",
        "filename": "test.png",
        "outputformat": "jpg"
      })
    });

    const data = await response.json();
    console.log('üîç Curl-like response:', { status: response.status, data });

    res.json({
      success: response.ok,
      status: response.status,
      convertio_response: data,
      method: 'curl-like'
    });
  } catch (error) {
    console.error('üö® Curl-like test failed:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      method: 'curl-like'
    });
  }
});

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Convertio API —Å fetch –≤–º–µ—Å—Ç–æ axios
app.get('/api/test-convertio-fetch', async (req, res) => {
  console.log('üß™ Testing Convertio API with fetch...');
  
  if (!convertioKey) {
    return res.status(500).json({ error: 'CONVERTIO_KEY not set' });
  }

  try {
    const response = await fetch('https://api.convertio.co/convert', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        apikey: convertioKey,
        input: 'base64',
        file: 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==',
        filename: 'test.png',
        outputformat: 'jpg'
      })
    });

    const data = await response.json();
    console.log('üîç Fetch response:', { status: response.status, data });

    res.json({
      success: response.ok,
      status: response.status,
      convertio_response: data,
      method: 'fetch'
    });
  } catch (error) {
    console.error('üö® Fetch test failed:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      method: 'fetch'
    });
  }
});

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Convertio API –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
app.get('/api/test-convertio', async (req, res) => {
  console.log('üß™ Testing Convertio API connection...');
  
  if (!convertioKey) {
    return res.status(500).json({ error: 'CONVERTIO_KEY not set' });
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP —Å–µ—Ä–≤–µ—Ä–∞
  let serverIP = 'unknown';
  try {
    const ipResponse = await axios.get('https://api.ipify.org?format=json', { timeout: 3000 });
    serverIP = ipResponse.data.ip;
    console.log('üåê Server external IP:', serverIP);
  } catch (ipError) {
    console.log('‚ö†Ô∏è Could not get external IP:', ipError.message);
  }

  try {
    // –î–æ–±–∞–≤–ª—è–µ–º User-Agent –∏ –¥—Ä—É–≥–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
    const headers = {
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    };

    // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Convertio API
    const response = await axios.post('https://api.convertio.co/convert', {
      apikey: convertioKey,
      input: 'base64',
      file: 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==', // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π 1x1 PNG
      filename: 'test.png',
      outputformat: 'jpg',
    }, { headers });

    console.log('‚úÖ Convertio API test response:', response.data);
    res.json({
      success: true,
      convertio_response: response.data,
      server_ip: serverIP,
      message: 'Convertio API working!'
    });
  } catch (error) {
    console.error('üö® Convertio API test failed:', {
      message: error.message,
      response: error.response ? error.response.data : 'No response'
    });
    
    res.status(500).json({
      success: false,
      error: error.message,
      server_ip: serverIP,
      convertio_error: error.response ? error.response.data : null
    });
  }
});

app.get('/api/conversion-status/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    // CloudConvert –∏—Å–ø–æ–ª—å–∑—É–µ—Ç jobs –≤–º–µ—Å—Ç–æ conversions
    const response = await axios.get(`https://api.cloudconvert.com/v2/jobs/${id}`, {
      headers: {
        'Authorization': `Bearer ${cloudConvertKey}`
      }
    });
    
    const jobData = response.data.data;
    console.log(`üìä CloudConvert job status: ${jobData.status} (${id})`);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º CloudConvert —Å—Ç–∞—Ç—É—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
    let status = jobData.status;
    let downloadUrl = null;
    let step = 'wait';
    let fileSize = null;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º step –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á
    if (status === 'finished') {
      const exportTask = jobData.tasks.find(task => task.operation === 'export/url');
      if (exportTask && exportTask.result && exportTask.result.files) {
        downloadUrl = exportTask.result.files[0].url;
        fileSize = exportTask.result.files[0].size;
        step = 'finish';
      }
    } else if (status === 'error') {
      const errorTask = jobData.tasks.find(task => task.status === 'error');
      if (errorTask) {
        return res.status(400).json({ error: errorTask.message || 'CloudConvert job failed' });
      }
    } else if (status === 'processing') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∞—è –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
      const importTask = jobData.tasks.find(task => task.operation === 'import/base64' || task.operation === 'import/upload');
      const convertTask = jobData.tasks.find(task => task.operation === 'convert');
      
      if (importTask && importTask.status === 'processing') {
        step = 'upload';
      } else if (convertTask && convertTask.status === 'processing') {
        step = 'convert';
      } else {
        step = 'wait';
      }
    } else if (status === 'waiting') {
      step = 'wait';
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    res.json({
      id: jobData.id,
      status: status,
      step: step,
      step_percent: status === 'finished' ? 100 : (status === 'processing' ? 50 : 10),
      output: downloadUrl ? {
        url: downloadUrl,
        size: fileSize
      } : null
    });
    
  } catch (error) {
    console.error('Error fetching CloudConvert job status:', error.response ? error.response.data : error.message);
    res.status(500).json({ error: 'Failed to fetch conversion status' });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö GET-–∑–∞–ø—Ä–æ—Å–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç index.html
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(port, () => {
  console.log(`üöÄ Convertio Server is running on http://localhost:${port}`);
  console.log(`üìÅ Static files served from ./public`);
  console.log(`üîÑ Auto-restart enabled with nodemon`);
});