require('dotenv').config();
const express = require('express');
const axios = require('axios');
const cors = require('cors');
const Busboy = require('busboy');
const os = require('os');
const path = require('path');
const fs = require('fs');

const app = express();
const port = process.env.PORT || 3012;
const convertioKey = process.env.CONVERTIO_KEY;

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
console.log('üîç Environment Check:');
console.log(`Port: ${port}`);
console.log(`CONVERTIO_KEY: ${convertioKey ? 'SET ‚úÖ' : 'MISSING ‚ùå'}`);
console.log(`NODE_ENV: ${process.env.NODE_ENV || 'not set'}`);

if (!convertioKey) {
  console.error('üö® CRITICAL: CONVERTIO_KEY environment variable is not set!');
  console.error('   Please set CONVERTIO_KEY in Render Dashboard Environment Variables');
}

app.use(cors({ origin: true }));
app.use(express.static('public'));

// Middleware –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞
app.set('trust proxy', true);

app.post('/api/start-conversion', (req, res) => {
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ CONVERTIO_KEY –Ω–∞ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å
  if (!convertioKey) {
    console.error('üö® CONVERTIO_KEY missing in request handler');
    return res.status(500).json({ 
      error: 'Server configuration error: CONVERTIO_KEY not set. Please check Render Environment Variables.' 
    });
  }

  if (req.method !== 'POST') {
    return res.status(405).send('Method Not Allowed');
  }

  const busboy = Busboy({ headers: req.headers });
  const tmpdir = os.tmpdir();
  const fields = {};
  const fileWrites = [];

  busboy.on('field', (fieldname, val) => {
    fields[fieldname] = val;
  });

  busboy.on('file', (fieldname, file, { filename }) => {
    const filepath = path.join(tmpdir, filename);
    const writeStream = fs.createWriteStream(filepath);
    file.pipe(writeStream);

    const promise = new Promise((resolve, reject) => {
      file.on('end', () => {
        writeStream.end();
      });
      writeStream.on('finish', () => {
        resolve({ filepath, filename });
      });
      writeStream.on('error', reject);
    });
    fileWrites.push(promise);
  });

  const conversionPromise = new Promise((resolve, reject) => {
    busboy.on('finish', async () => {
      try {
        const files = await Promise.all(fileWrites);
        const [uploadedFile] = files;

        if (!uploadedFile) {
          return reject(new Error('File is required'));
        }

        let fileBuffer;
        let shouldUseDirectUpload = false; // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞—Ä–∞–Ω–µ–µ
        
        try {
          const fileStats = fs.statSync(uploadedFile.filepath);
          const fileSizeInMB = fileStats.size / (1024 * 1024);
          
          // –ü–æ–ª—É—á–∞–µ–º IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞
          const clientIP = req.ip || req.connection.remoteAddress || req.socket.remoteAddress || 
                          (req.connection.socket ? req.connection.socket.remoteAddress : null) ||
                          req.headers['x-forwarded-for'] || req.headers['x-real-ip'];
          
          // –í–∞—à IP –∞–¥—Ä–µ—Å (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π IP)
          const allowedIP = '127.0.0.1'; // –∏–ª–∏ –≤–∞—à –≤–Ω–µ—à–Ω–∏–π IP
          const isLocalhost = clientIP === '::1' || clientIP === '127.0.0.1' || clientIP === '::ffff:127.0.0.1';
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è Render Free (–º–∞–∫—Å–∏–º—É–º 400MB –æ–±—â–∏–π –ª–∏–º–∏—Ç)
          const maxBase64Size = 200; // 200MB –º–∞–∫—Å–∏–º—É–º –¥–ª—è base64 (—ç–∫–æ–Ω–æ–º–∏–º RAM)
          const maxDirectUploadSize = 400; // 400MB –º–∞–∫—Å–∏–º—É–º –¥–ª—è Render Free Plan
          
          if (fileSizeInMB > maxDirectUploadSize) {
            throw new Error(`File size exceeds ${maxDirectUploadSize}MB limit`);
          }
          
          shouldUseDirectUpload = fileSizeInMB > maxBase64Size;
          
          // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          console.log(`File upload: ${fileSizeInMB.toFixed(2)}MB from IP: ${clientIP}, isLocalhost: ${isLocalhost}, useDirectUpload: ${shouldUseDirectUpload}`);
          
          if (!shouldUseDirectUpload) {
            // –î–ª—è —Ñ–∞–π–ª–æ–≤ –º–µ–Ω—å—à–µ 300MB –∏—Å–ø–æ–ª—å–∑—É–µ–º base64
            fileBuffer = fs.readFileSync(uploadedFile.filepath);
          }
        } finally {
          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è base64 –∑–∞–≥—Ä—É–∑–∫–∏
          if (!shouldUseDirectUpload && fs.existsSync(uploadedFile.filepath)) {
            fs.unlinkSync(uploadedFile.filepath);
          }
        }

        let response;
        let conversionId;

        if (shouldUseDirectUpload) {
          // –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º direct upload
          console.log('Using direct upload for large file...');
          
          // –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Å input: "upload"
          response = await axios.post('https://api.convertio.co/convert', {
            apikey: convertioKey,
            input: 'upload',
            filename: uploadedFile.filename,
            outputformat: fields.outputformat,
          });

          if (response.data.status !== 'ok') {
            throw new Error(response.data.error || 'Failed to create conversion task');
          }

          conversionId = response.data.data.id;
          
          // –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ PUT –∑–∞–ø—Ä–æ—Å
          console.log(`Uploading file for conversion ID: ${conversionId}`);
          
          const fileStream = fs.createReadStream(uploadedFile.filepath);
          const uploadResponse = await axios.put(
            `https://api.convertio.co/convert/${conversionId}/${encodeURIComponent(uploadedFile.filename)}`,
            fileStream,
            {
              headers: {
                'Content-Type': 'application/octet-stream',
                'Content-Length': fs.statSync(uploadedFile.filepath).size
              },
              maxContentLength: Infinity,
              maxBodyLength: Infinity,
              timeout: 1800000 // 30 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            }
          );

          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
          if (fs.existsSync(uploadedFile.filepath)) {
            fs.unlinkSync(uploadedFile.filepath);
          }

          if (uploadResponse.data.status !== 'ok') {
            throw new Error(uploadResponse.data.error || 'Failed to upload file');
          }

          console.log('File uploaded successfully via direct upload');
          
        } else {
          // –î–ª—è —Ñ–∞–π–ª–æ–≤ –º–µ–Ω—å—à–µ 300MB –∏—Å–ø–æ–ª—å–∑—É–µ–º base64
          response = await axios.post('https://api.convertio.co/convert', {
            apikey: convertioKey,
            input: 'base64',
            file: fileBuffer.toString('base64'),
            filename: uploadedFile.filename,
            outputformat: fields.outputformat,
          });

          if (response.data.status !== 'ok') {
            throw new Error(response.data.error || 'Convertio API returned an error');
          }

          conversionId = response.data.data.id;
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        resolve({ id: conversionId });
      } catch (error) {
        console.error('üö® Detailed error in conversion process:', {
          message: error.message,
          stack: error.stack,
          code: error.code,
          convertioKey: convertioKey ? 'SET' : 'MISSING',
          response: error.response ? {
            status: error.response.status,
            statusText: error.response.statusText,
            data: error.response.data
          } : 'No response data'
        });
        reject(error);
      }
    });

    busboy.on('error', (err) => reject(err));
  });

  req.pipe(busboy);

  conversionPromise
    .then((data) => {
      console.log('‚úÖ Conversion started successfully:', data.id);
      res.json({ id: data.id });
    })
    .catch((error) => {
      console.error('üö® Error during conversion process:', {
        message: error.message,
        stack: error.stack,
        code: error.code,
        convertioKey: convertioKey ? 'SET' : 'MISSING',
        response: error.response ? error.response.data : 'No response'
      });
      
      // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
      if (error.message.includes('configuration error')) {
        return res.status(500).json({ error: error.message });
      }
      if (error.message.includes('File size exceeds')) {
        return res.status(413).json({ error: error.message });
      }
      if (error.message.includes('API')) {
        return res.status(422).json({ error: error.message });
      }
      
      res.status(500).json({ error: `Failed to process file upload: ${error.message}` });
    });
});

// Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
app.get('/api/health', (req, res) => {
  const health = {
    status: 'ok',
    timestamp: new Date().toISOString(),
    environment: {
      port: port,
      nodeEnv: process.env.NODE_ENV || 'not set',
      convertioKey: convertioKey ? 'SET ‚úÖ' : 'MISSING ‚ùå'
    }
  };
  
  console.log('üè• Health check requested:', health);
  res.json(health);
});

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç Convertio API –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
app.get('/api/test-convertio', async (req, res) => {
  console.log('üß™ Testing Convertio API connection...');
  
  if (!convertioKey) {
    return res.status(500).json({ error: 'CONVERTIO_KEY not set' });
  }

  try {
    // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ Convertio API
    const response = await axios.post('https://api.convertio.co/convert', {
      apikey: convertioKey,
      input: 'base64',
      file: 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==', // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π 1x1 PNG
      filename: 'test.png',
      outputformat: 'jpg',
    });

    console.log('‚úÖ Convertio API test response:', response.data);
    res.json({
      success: true,
      convertio_response: response.data,
      message: 'Convertio API working!'
    });
  } catch (error) {
    console.error('üö® Convertio API test failed:', {
      message: error.message,
      response: error.response ? error.response.data : 'No response'
    });
    
    res.status(500).json({
      success: false,
      error: error.message,
      convertio_error: error.response ? error.response.data : null
    });
  }
});

app.get('/api/conversion-status/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const response = await axios.get(`https://api.convertio.co/convert/${id}/status`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç Convertio API
    if (response.data.status !== 'ok') {
      return res.status(400).json({ error: response.data.error || 'Convertio API returned an error' });
    }
    
    res.json(response.data.data);
  } catch (error) {
    console.error('Error fetching conversion status:', error.response ? error.response.data : error.message);
    res.status(500).json({ error: 'Failed to fetch conversion status' });
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö GET-–∑–∞–ø—Ä–æ—Å–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç index.html
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.listen(port, () => {
  console.log(`üöÄ Convertio Server is running on http://localhost:${port}`);
  console.log(`üìÅ Static files served from ./public`);
  console.log(`üîÑ Auto-restart enabled with nodemon`);
});