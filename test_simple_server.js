const axios = require('axios');
const fs = require('fs');
const path = require('path');
const FormData = require('form-data');

async function testSimpleServer() {
  console.log('=== –¢–ï–°–¢ –ü–†–û–°–¢–û–ì–û –°–ï–†–í–ï–†–ê –ù–ê –ü–û–†–¢–£ 3004 ===');
  
  try {
    // 1. Health check
    console.log('1. Health check...');
    const health = await axios.get('http://localhost:3004/api/health');
    console.log('   –°—Ç–∞—Ç—É—Å:', health.data.status);
    
    // 2. –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    console.log('\n2. –¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Screenshot (19).png...');
    const inputFile = path.join(__dirname, 'video for test', 'Screenshot (19).png');
    
    const form = new FormData();
    form.append('file', fs.createReadStream(inputFile));
    form.append('outputformat', 'jpg');
    
    console.log('   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª...');
    const convertResponse = await axios.post('http://localhost:3004/api/start-conversion', form, {
      headers: {
        ...form.getHeaders(),
      },
      timeout: 60000
    });
    
    console.log('   –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞! Job ID:', convertResponse.data.id);
    const jobId = convertResponse.data.id;
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    console.log('\n3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å...');
    
    for (let i = 0; i < 15; i++) {
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      const statusResponse = await axios.get(`http://localhost:3004/api/conversion-status/${jobId}`);
      const status = statusResponse.data.status;
      const step = statusResponse.data.step;
      const percent = statusResponse.data.step_percent;
      
      console.log(`   –ü–æ–ø—ã—Ç–∫–∞ ${i+1}: ${status} (${step}) - ${percent}%`);
      
      if (status === 'finished' && statusResponse.data.output) {
        console.log('\n‚úÖ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!');
        
        // –°–∫–∞—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const downloadUrl = statusResponse.data.output.url;
        const downloadResponse = await axios.get(downloadUrl, {
          responseType: 'arraybuffer'
        });
        
        const outputFile = path.join(__dirname, 'video for test', 'Screenshot_19_SIMPLE.jpg');
        fs.writeFileSync(outputFile, downloadResponse.data);
        
        const originalSize = fs.statSync(inputFile).size;
        const resultSize = downloadResponse.data.length;
        const compression = ((originalSize - resultSize) / originalSize * 100).toFixed(1);
        
        console.log('üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', outputFile);
        console.log('üìä –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä:', (originalSize / 1024).toFixed(2), 'KB');
        console.log('üìä –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', (resultSize / 1024).toFixed(2), 'KB');
        console.log('üìà –°–∂–∞—Ç–∏–µ:', compression + '%');
        console.log('\nüéâ –ü–†–û–°–¢–û–ô –°–ï–†–í–ï–† –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!');
        return;
      } else if (status === 'error') {
        console.log('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', statusResponse.data);
        return;
      }
    }
    
    console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è');
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
    if (error.response) {
      console.log('Status:', error.response.status);
      console.log('Data:', error.response.data);
    }
  }
}

testSimpleServer();